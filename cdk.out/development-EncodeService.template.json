{
  "Resources": {
    "VideoInputBucket940F4F43": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/VideoInputBucket/Resource"
      }
    },
    "VideoInputBucketNotifications76FF7081": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "VideoInputBucket940F4F43"
        },
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "ExtractAudioLambda12696EC4",
                  "Arn"
                ]
              }
            }
          ]
        }
      },
      "DependsOn": [
        "VideoInputBucketAllowBucketNotificationsTodevelopmentEncodeServiceExtractAudioLambdaA619F51B86D7DD34"
      ],
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/VideoInputBucket/Notifications/Resource"
      }
    },
    "VideoInputBucketAllowBucketNotificationsTodevelopmentEncodeServiceExtractAudioLambdaA619F51B86D7DD34": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ExtractAudioLambda12696EC4",
            "Arn"
          ]
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "VideoInputBucket940F4F43",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/VideoInputBucket/AllowBucketNotificationsTodevelopmentEncodeServiceExtractAudioLambdaA619F51B"
      }
    },
    "ExtractAudioLambdaServiceRole0AE87B8E": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ExtractAudioLambda/ServiceRole/Resource"
      }
    },
    "ExtractAudioLambda12696EC4": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters941bf7e1195b6c9a39ac61275578bad5d3f52eae9c8a1f939b143e82bd850e9fS3BucketE5D99661"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters941bf7e1195b6c9a39ac61275578bad5d3f52eae9c8a1f939b143e82bd850e9fS3VersionKeyFE527492"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters941bf7e1195b6c9a39ac61275578bad5d3f52eae9c8a1f939b143e82bd850e9fS3VersionKeyFE527492"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "ExtractAudioLambdaServiceRole0AE87B8E",
            "Arn"
          ]
        },
        "FunctionName": "extraAudioLambda",
        "Handler": "extract-audio.handler",
        "MemorySize": 521,
        "Runtime": "nodejs10.x",
        "Timeout": 60
      },
      "DependsOn": [
        "ExtractAudioLambdaServiceRole0AE87B8E"
      ],
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ExtractAudioLambda/Resource",
        "aws:asset:path": "asset.941bf7e1195b6c9a39ac61275578bad5d3f52eae9c8a1f939b143e82bd850e9f.zip",
        "aws:asset:property": "Code"
      }
    },
    "ExtractAudioBucket197901EB": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ExtractAudioBucket/Resource"
      }
    },
    "ExtractAudioBucketNotificationsF31E573B": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "ExtractAudioBucket197901EB"
        },
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "sendTranscriptionLambda653766BA",
                  "Arn"
                ]
              }
            }
          ]
        }
      },
      "DependsOn": [
        "ExtractAudioBucketAllowBucketNotificationsTodevelopmentEncodeServicesendTranscriptionLambda53BB1DA78FA674F1"
      ],
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ExtractAudioBucket/Notifications/Resource"
      }
    },
    "ExtractAudioBucketAllowBucketNotificationsTodevelopmentEncodeServicesendTranscriptionLambda53BB1DA78FA674F1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "sendTranscriptionLambda653766BA",
            "Arn"
          ]
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "ExtractAudioBucket197901EB",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ExtractAudioBucket/AllowBucketNotificationsTodevelopmentEncodeServicesendTranscriptionLambda53BB1DA7"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
        "Code": {
          "ZipFile": "exports.handler = (event, context) => {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies\n    const s3 = new (require('aws-sdk').S3)();\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const https = require('https');\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const url = require('url');\n    log(JSON.stringify(event, undefined, 2));\n    const props = event.ResourceProperties;\n    if (event.RequestType === 'Delete') {\n        props.NotificationConfiguration = {}; // this is how you clean out notifications\n    }\n    const req = {\n        Bucket: props.BucketName,\n        NotificationConfiguration: props.NotificationConfiguration,\n    };\n    return s3.putBucketNotificationConfiguration(req, (err, data) => {\n        log({ err, data });\n        if (err) {\n            return submitResponse('FAILED', err.message + `\\nMore information in CloudWatch Log Stream: ${context.logStreamName}`);\n        }\n        else {\n            return submitResponse('SUCCESS');\n        }\n    });\n    function log(obj) {\n        console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);\n    }\n    // eslint-disable-next-line max-len\n    // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule\n    // to allow sending an error message as a reason.\n    function submitResponse(responseStatus, reason) {\n        const responseBody = JSON.stringify({\n            Status: responseStatus,\n            Reason: reason || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,\n            PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,\n            StackId: event.StackId,\n            RequestId: event.RequestId,\n            LogicalResourceId: event.LogicalResourceId,\n            NoEcho: false,\n        });\n        log({ responseBody });\n        const parsedUrl = url.parse(event.ResponseURL);\n        const options = {\n            hostname: parsedUrl.hostname,\n            port: 443,\n            path: parsedUrl.path,\n            method: 'PUT',\n            headers: {\n                'content-type': '',\n                'content-length': responseBody.length,\n            },\n        };\n        const request = https.request(options, (r) => {\n            log({ statusCode: r.statusCode, statusMessage: r.statusMessage });\n            context.done();\n        });\n        request.on('error', (error) => {\n            log({ sendError: error });\n            context.done();\n        });\n        request.write(responseBody);\n        request.end();\n    }\n};"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300
      },
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
      ],
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
      }
    },
    "sendTranscriptionLambdaServiceRole094A4526": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/sendTranscriptionLambda/ServiceRole/Resource"
      }
    },
    "sendTranscriptionLambda653766BA": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters337e8e58b61a12dcce4df97c067e7dcf962b6661ce75a9bbffbfa8e14b5eff3aS3Bucket02117B5D"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters337e8e58b61a12dcce4df97c067e7dcf962b6661ce75a9bbffbfa8e14b5eff3aS3VersionKey524AB003"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters337e8e58b61a12dcce4df97c067e7dcf962b6661ce75a9bbffbfa8e14b5eff3aS3VersionKey524AB003"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "sendTranscriptionLambdaServiceRole094A4526",
            "Arn"
          ]
        },
        "FunctionName": "sendTranscriptionLambda",
        "Handler": "send-transcribe-job.handler",
        "MemorySize": 521,
        "Runtime": "nodejs10.x",
        "Timeout": 60
      },
      "DependsOn": [
        "sendTranscriptionLambdaServiceRole094A4526"
      ],
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/sendTranscriptionLambda/Resource",
        "aws:asset:path": "asset.337e8e58b61a12dcce4df97c067e7dcf962b6661ce75a9bbffbfa8e14b5eff3a.zip",
        "aws:asset:property": "Code"
      }
    },
    "ApiGatewayForApiServiceF97F9386": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "FailOnWarnings": true,
        "Name": "assembly-development-webhook"
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ApiGatewayForApiService/Resource"
      }
    },
    "ApiGatewayForApiServiceCloudWatchRole21D61FAC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ApiGatewayForApiService/CloudWatchRole/Resource"
      }
    },
    "ApiGatewayForApiServiceAccount12973782": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiGatewayForApiServiceCloudWatchRole21D61FAC",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ApiGatewayForApiServiceF97F9386"
      ],
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ApiGatewayForApiService/Account"
      }
    },
    "ApiGatewayForApiServiceDeploymentB7C1F9F3b6edd3162f55477a4db20b005d94fb8d": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayForApiServiceF97F9386"
        },
        "Description": "Automatically created by the RestApi construct"
      },
      "DependsOn": [
        "ApiGatewayForApiServicewebhookGET094EEC39",
        "ApiGatewayForApiServicewebhookPOSTA353740B",
        "ApiGatewayForApiServicewebhookE33C8AAD"
      ],
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ApiGatewayForApiService/Deployment/Resource"
      }
    },
    "ApiGatewayForApiServiceDeploymentStagedevelopmentC066677A": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayForApiServiceF97F9386"
        },
        "DeploymentId": {
          "Ref": "ApiGatewayForApiServiceDeploymentB7C1F9F3b6edd3162f55477a4db20b005d94fb8d"
        },
        "StageName": "development"
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ApiGatewayForApiService/DeploymentStage.development/Resource"
      }
    },
    "ApiGatewayForApiServicewebhookE33C8AAD": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayForApiServiceF97F9386",
            "RootResourceId"
          ]
        },
        "PathPart": "webhook",
        "RestApiId": {
          "Ref": "ApiGatewayForApiServiceF97F9386"
        }
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ApiGatewayForApiService/Default/webhook/Resource"
      }
    },
    "ApiGatewayForApiServicewebhookGETApiPermissiondevelopmentEncodeServiceApiGatewayForApiService7F461E87GETwebhookA35D73C7": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "assemblyWebhookLambda2AE37EC2",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayForApiServiceF97F9386"
              },
              "/",
              {
                "Ref": "ApiGatewayForApiServiceDeploymentStagedevelopmentC066677A"
              },
              "/GET/webhook"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ApiGatewayForApiService/Default/webhook/GET/ApiPermission.developmentEncodeServiceApiGatewayForApiService7F461E87.GET..webhook"
      }
    },
    "ApiGatewayForApiServicewebhookGETApiPermissionTestdevelopmentEncodeServiceApiGatewayForApiService7F461E87GETwebhook3F21A025": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "assemblyWebhookLambda2AE37EC2",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayForApiServiceF97F9386"
              },
              "/test-invoke-stage/GET/webhook"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ApiGatewayForApiService/Default/webhook/GET/ApiPermission.Test.developmentEncodeServiceApiGatewayForApiService7F461E87.GET..webhook"
      }
    },
    "ApiGatewayForApiServicewebhookGET094EEC39": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "ResourceId": {
          "Ref": "ApiGatewayForApiServicewebhookE33C8AAD"
        },
        "RestApiId": {
          "Ref": "ApiGatewayForApiServiceF97F9386"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "assemblyWebhookLambda2AE37EC2",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ApiGatewayForApiService/Default/webhook/GET/Resource"
      }
    },
    "ApiGatewayForApiServicewebhookPOSTApiPermissiondevelopmentEncodeServiceApiGatewayForApiService7F461E87POSTwebhookFC378AD1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "assemblyWebhookLambda2AE37EC2",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayForApiServiceF97F9386"
              },
              "/",
              {
                "Ref": "ApiGatewayForApiServiceDeploymentStagedevelopmentC066677A"
              },
              "/POST/webhook"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ApiGatewayForApiService/Default/webhook/POST/ApiPermission.developmentEncodeServiceApiGatewayForApiService7F461E87.POST..webhook"
      }
    },
    "ApiGatewayForApiServicewebhookPOSTApiPermissionTestdevelopmentEncodeServiceApiGatewayForApiService7F461E87POSTwebhookBCE7B76D": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "assemblyWebhookLambda2AE37EC2",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayForApiServiceF97F9386"
              },
              "/test-invoke-stage/POST/webhook"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ApiGatewayForApiService/Default/webhook/POST/ApiPermission.Test.developmentEncodeServiceApiGatewayForApiService7F461E87.POST..webhook"
      }
    },
    "ApiGatewayForApiServicewebhookPOSTA353740B": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "ResourceId": {
          "Ref": "ApiGatewayForApiServicewebhookE33C8AAD"
        },
        "RestApiId": {
          "Ref": "ApiGatewayForApiServiceF97F9386"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "assemblyWebhookLambda2AE37EC2",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/ApiGatewayForApiService/Default/webhook/POST/Resource"
      }
    },
    "assemblyWebhookLambdaServiceRoleA8F8BA14": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/assemblyWebhookLambda/ServiceRole/Resource"
      }
    },
    "assemblyWebhookLambda2AE37EC2": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParametersd6cdb60cb7fcbadbf62d5977fd4cac71f25311c2054295189b1f143c8e7c28c0S3Bucket667917AA"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParametersd6cdb60cb7fcbadbf62d5977fd4cac71f25311c2054295189b1f143c8e7c28c0S3VersionKey4AB7D087"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParametersd6cdb60cb7fcbadbf62d5977fd4cac71f25311c2054295189b1f143c8e7c28c0S3VersionKey4AB7D087"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "assemblyWebhookLambdaServiceRoleA8F8BA14",
            "Arn"
          ]
        },
        "FunctionName": "assemblyWebhookLambda",
        "Handler": "assembly-webhook.handler",
        "MemorySize": 521,
        "Runtime": "nodejs10.x",
        "Timeout": 60
      },
      "DependsOn": [
        "assemblyWebhookLambdaServiceRoleA8F8BA14"
      ],
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/assemblyWebhookLambda/Resource",
        "aws:asset:path": "asset.d6cdb60cb7fcbadbf62d5977fd4cac71f25311c2054295189b1f143c8e7c28c0.zip",
        "aws:asset:property": "Code"
      }
    },
    "VideoTranscriptionBucket53EBD46C": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/VideoTranscriptionBucket/Resource"
      }
    },
    "VideoTranscriptionBucketNotificationsC7876A15": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "VideoTranscriptionBucket53EBD46C"
        },
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "assemblyWebhookLambda2AE37EC2",
                  "Arn"
                ]
              }
            }
          ]
        }
      },
      "DependsOn": [
        "VideoTranscriptionBucketAllowBucketNotificationsTodevelopmentEncodeServiceassemblyWebhookLambda2940B332604B42B0"
      ],
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/VideoTranscriptionBucket/Notifications/Resource"
      }
    },
    "VideoTranscriptionBucketAllowBucketNotificationsTodevelopmentEncodeServiceassemblyWebhookLambda2940B332604B42B0": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "assemblyWebhookLambda2AE37EC2",
            "Arn"
          ]
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "VideoTranscriptionBucket53EBD46C",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/VideoTranscriptionBucket/AllowBucketNotificationsTodevelopmentEncodeServiceassemblyWebhookLambda2940B332"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAAE1VQ0W7DIAz8lr4T2iib9rq01d6mVdkXeMTLaAJEGFZFiH8fkKXannw2d74zNa8PT/ywe4YbVaIf90EYizy8OxAjOxlNznrh2OlTd0jGW4GsJUKXCIPUA7tPE+MCFhQ6tLl58272RZi29NJJoyPLLoEaHo5ejFheVxTZBOqjBx7yHrRKEiUFe/FaZGlmbjgyCYqHzkzFtdSLmaRYSoiCIqOmghyUeMnLYJYDOLzBkqRIrp3l71UbbIUwXjt2xnkyi0Jd8v3p8s3FcgXb6Ucg/PcPd/yK7sv0ebSiGCPTpkd+pf13/cDrR97sriRlZZOxVMi7tf4AMSrfdpcBAAA="
      },
      "Metadata": {
        "aws:cdk:path": "development-EncodeService/CDKMetadata/Default"
      },
      "Condition": "CDKMetadataAvailable"
    }
  },
  "Parameters": {
    "AssetParameters941bf7e1195b6c9a39ac61275578bad5d3f52eae9c8a1f939b143e82bd850e9fS3BucketE5D99661": {
      "Type": "String",
      "Description": "S3 bucket for asset \"941bf7e1195b6c9a39ac61275578bad5d3f52eae9c8a1f939b143e82bd850e9f\""
    },
    "AssetParameters941bf7e1195b6c9a39ac61275578bad5d3f52eae9c8a1f939b143e82bd850e9fS3VersionKeyFE527492": {
      "Type": "String",
      "Description": "S3 key for asset version \"941bf7e1195b6c9a39ac61275578bad5d3f52eae9c8a1f939b143e82bd850e9f\""
    },
    "AssetParameters941bf7e1195b6c9a39ac61275578bad5d3f52eae9c8a1f939b143e82bd850e9fArtifactHashE361E4C0": {
      "Type": "String",
      "Description": "Artifact hash for asset \"941bf7e1195b6c9a39ac61275578bad5d3f52eae9c8a1f939b143e82bd850e9f\""
    },
    "AssetParameters337e8e58b61a12dcce4df97c067e7dcf962b6661ce75a9bbffbfa8e14b5eff3aS3Bucket02117B5D": {
      "Type": "String",
      "Description": "S3 bucket for asset \"337e8e58b61a12dcce4df97c067e7dcf962b6661ce75a9bbffbfa8e14b5eff3a\""
    },
    "AssetParameters337e8e58b61a12dcce4df97c067e7dcf962b6661ce75a9bbffbfa8e14b5eff3aS3VersionKey524AB003": {
      "Type": "String",
      "Description": "S3 key for asset version \"337e8e58b61a12dcce4df97c067e7dcf962b6661ce75a9bbffbfa8e14b5eff3a\""
    },
    "AssetParameters337e8e58b61a12dcce4df97c067e7dcf962b6661ce75a9bbffbfa8e14b5eff3aArtifactHash83711935": {
      "Type": "String",
      "Description": "Artifact hash for asset \"337e8e58b61a12dcce4df97c067e7dcf962b6661ce75a9bbffbfa8e14b5eff3a\""
    },
    "AssetParametersd6cdb60cb7fcbadbf62d5977fd4cac71f25311c2054295189b1f143c8e7c28c0S3Bucket667917AA": {
      "Type": "String",
      "Description": "S3 bucket for asset \"d6cdb60cb7fcbadbf62d5977fd4cac71f25311c2054295189b1f143c8e7c28c0\""
    },
    "AssetParametersd6cdb60cb7fcbadbf62d5977fd4cac71f25311c2054295189b1f143c8e7c28c0S3VersionKey4AB7D087": {
      "Type": "String",
      "Description": "S3 key for asset version \"d6cdb60cb7fcbadbf62d5977fd4cac71f25311c2054295189b1f143c8e7c28c0\""
    },
    "AssetParametersd6cdb60cb7fcbadbf62d5977fd4cac71f25311c2054295189b1f143c8e7c28c0ArtifactHash55058412": {
      "Type": "String",
      "Description": "Artifact hash for asset \"d6cdb60cb7fcbadbf62d5977fd4cac71f25311c2054295189b1f143c8e7c28c0\""
    }
  },
  "Outputs": {
    "ApiGatewayForApiServiceEndpointE631541E": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayForApiServiceF97F9386"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/",
            {
              "Ref": "ApiGatewayForApiServiceDeploymentStagedevelopmentC066677A"
            },
            "/"
          ]
        ]
      }
    }
  },
  "Conditions": {
    "CDKMetadataAvailable": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "af-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-northwest-1"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-2"
              ]
            }
          ]
        }
      ]
    }
  }
}